Since python 3.10 dataclass instances can easily enable a memory optimization.

By default, when we define a class in Python, it uses a __dict__ to store its attributes and methods.

This means that every instance of the class has an extensible dictionary to store its data, this flexibility comes at the cost of memory usage.

When we use __slots__, Python creates a tuple to store the attributes of the class instead of a dictionary, reducing memory usage.

== Non compliant Code Example

[source,python]
----
@dataclass
class MyDataclass:
    a: int
    b: int
    c: int
----

== Compliant Solution

[source,python]
----
@dataclass(slots=True)
class MySlottedDataclass:
    a: int
    b: int
    c: int
----
