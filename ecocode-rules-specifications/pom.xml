<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.ecocode</groupId>
    <artifactId>ecocode-parent</artifactId>
    <version>${revision}</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>ecocode-rules-specifications</artifactId>

  <name>ecoCode Rules Specifications repository</name>
  <description>Repository that contains the specifications of every static-analysis rules available in ecoCode plugins.</description>
  <url>https://github.com/green-code-initiative/ecoCode/tree/main/ecocode-rules-specifications</url>

  <properties>
    <java.version>11</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <!-- to prevent message: system modules path not set in conjunction with
		      -source 11 -->
    <maven.compiler.release>${java.version}</maven.compiler.release>

    <encoding>UTF-8</encoding>
    <project.build.sourceEncoding>${encoding}</project.build.sourceEncoding>
    <project.reporting.outputEncoding>${encoding}</project.reporting.outputEncoding>

    <junit.jupiter.version>5.9.1</junit.jupiter.version>
    <assertJ.version>3.23.1</assertJ.version>
    <mockito.version>5.3.1</mockito.version>
    <sonarqube.version>10.10.0.2391</sonarqube.version>
    <sonar-analyzer-commons.version>2.12.0.2964</sonar-analyzer-commons.version>
  </properties>
  <dependencies>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.sonarsource.api.plugin</groupId>
      <artifactId>sonar-plugin-api</artifactId>
      <version>${sonarqube.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.sonarsource.analyzer-commons</groupId>
      <artifactId>sonar-analyzer-commons</artifactId>
      <version>${sonar-analyzer-commons.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${assertJ.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version>
      </plugin>
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <version>4.5</version>
        <configuration>
          <properties>
            <owner>Green Code Initiative</owner>
            <email>https://www.ecocode.io</email>
          </properties>
          <licenseSets>
            <licenseSet>
              <header>com/mycila/maven/plugin/license/templates/GPL-3.txt</header>
              <includes>
                <include>**/*.java</include>
              </includes>
            </licenseSet>
          </licenseSets>
        </configuration>
        <executions>
          <execution>
            <id>validate</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>validate</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>2.43.0</version>
        <configuration>
          <pom>
            <includes>
              <include>pom.xml</include>
            </includes>
            <sortPom></sortPom>
          </pom>
          <java>
            <googleJavaFormat>
              <version>1.23.0</version>
            </googleJavaFormat>
          </java>
          <formats>
            <format>
              <includes>
                <include>src/**/*.json</include>
              </includes>
              <eclipseWtp>
                <type>JSON</type>
              </eclipseWtp>
              <endWithNewline></endWithNewline>
              <indent>
                <spaces>true</spaces>
                <spacesPerTab>2</spacesPerTab>
              </indent>
            </format>
          </formats>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>process-sources</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!--
					This plugin convert ASCIIDOC rule specification in HTML format
					ASCIIDOC format is used with custom features such as :
					- syntax highlighting (see code blocks on ASCIIDOC rules)
					- inclusions (see: php/EC74.asciidoc)
					- table data generation from CSV (see: php/EC69.asciidoc)
				-->
        <groupId>org.asciidoctor</groupId>
        <artifactId>asciidoctor-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>convert-to-html</id>
            <goals>
              <goal>process-asciidoc</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <sourceDirectory>${project.basedir}/src/main/rules</sourceDirectory>
              <outputDirectory>${project.build.directory}/rules-html</outputDirectory>
              <attributes>
                <source-highlighter>coderay</source-highlighter>
                <coderay-css>style</coderay-css>
              </attributes>
              <preserveDirectories>true</preserveDirectories>
              <embedAssets>true</embedAssets>
              <standalone>false</standalone>
              <relativeBaseDir>true</relativeBaseDir>
              <logHandler>
                <failIf>
                  <severity>ERROR</severity>
                </failIf>
              </logHandler>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!--
					Prepare resources tree needed by language.
					Each metadata JSON file must be in the same folder as the HTML description file
			    for the corresponding language.
				-->
        <groupId>com.github.johnpoth</groupId>
        <artifactId>jshell-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>prepare-rules-resources</id>
            <goals>
              <goal>run</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <scripts>
                <script>${project.basedir}/src/main/script/PrepareResources.jsh</script>
              </scripts>
              <options>
                <option>-R "-DsourceDir=${project.build.directory}/rules-html"</option>
                <option>-R "-DtargetDir=${project.build.outputDirectory}/io/ecocode/rules"</option>
              </options>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!--
					This module produce one artifact by language (with corresponding classifier)
					For example, to add rule specifications for Python language, add following
			dependency in python sonarqube plugin:

			        <dependency>
			            <groupId>io.ecocode</groupId>
			            <artifactId>ecocode-rules-specifications</artifactId>
			            <version>${project.version}</version>
			            <classifier>python</classifier>
			        </dependency>
				-->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <appendAssemblyId>true</appendAssemblyId>
        </configuration>
        <executions>
          <execution>
            <id>assembly-java</id>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <descriptors>
                <descriptor>${project.basedir}/src/main/assembly/java.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>assembly-php</id>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <descriptors>
                <descriptor>${project.basedir}/src/main/assembly/php.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>assembly-python</id>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <descriptors>
                <descriptor>${project.basedir}/src/main/assembly/python.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>assembly-javascript</id>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <descriptors>
                <descriptor>${project.basedir}/src/main/assembly/javascript.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>assembly-swift</id>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <descriptors>
                <descriptor>${project.basedir}/src/main/assembly/swift.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>assembly-xml</id>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <descriptors>
                <descriptor>${project.basedir}/src/main/assembly/xml.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>assembly-csharp</id>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <descriptors>
                <descriptor>${project.basedir}/src/main/assembly/csharp.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <execution>
            <id>assembly-html</id>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>prepare-package</phase>
            <configuration>
              <descriptors>
                <descriptor>${project.basedir}/src/main/assembly/html.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
